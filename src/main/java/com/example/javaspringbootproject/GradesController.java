package com.example.javaspringbootproject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/grades") // This means URL's start with /demo (after Application path)
public class GradesController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GradesRepository gradesRepository;

    @PostMapping(path="/add",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public @ResponseBody Grades addNewGrades (@RequestBody Grades newGrade){
        return gradesRepository.save(newGrade);
    }

    @GetMapping(path="/list")
    public @ResponseBody Iterable<Grades> getAllGrades() {
        // This returns a JSON or XML with the users
        return gradesRepository.findAll();
    }

    @GetMapping(path="/view/{id}")
    public @ResponseBody Grades getGrades(@PathVariable Integer id) {
        // This returns a JSON or XML with the grade
        return gradesRepository.getGradesByGid(id);
    }

    @PutMapping(path="/modify",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Grades modifyGrades(@RequestBody Grades modifiedGrades){
        Grades grades = gradesRepository.getGradesByGid(modifiedGrades.getGid());
        if (grades == null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }

        grades.setCourseId(modifiedGrades.getCourseId());
        grades.setStudentId(modifiedGrades.getStudentId());
        grades.setGrade(modifiedGrades.getGrade());

        return gradesRepository.save(grades);
    }

    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteGrades(@RequestParam Integer gid){
        Grades grades = gradesRepository.getGradesByGid(gid);
        if (grades == null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }
        gradesRepository.delete(grades);
        return "Grades ID: " + grades.getGid() + " was removed.";
    }
}
