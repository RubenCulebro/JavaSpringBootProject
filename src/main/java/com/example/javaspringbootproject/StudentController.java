package com.example.javaspringbootproject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/student") // This means URL's start with /demo (after Application path)
public class StudentController {
    @Autowired // This means to get the bean called userRepository
        // Which is auto-generated by Spring, we will use it to handle the data
    private StudentRepository studentRepository;

    // Add – a particular student
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewStudent (@RequestParam String firstName, @RequestParam String lastName,
                                               @RequestParam String email, @RequestParam String address,
                                               @RequestParam String city, @RequestParam String postal,
                                               @RequestParam String phone){
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Student student = new Student();
        student.setFirstName(firstName);
        student.setLastName(lastName);
        student.setEmail(email);
        student.setAddress(address);
        student.setCity(city);
        student.setPostal(postal);
        student.setPhone(phone);
        studentRepository.save(student);
        return student.getFirstName() + " " + student.getLastName() + " was saved.";
    }

    // List – all students
    @GetMapping(path="/list")
    public @ResponseBody Iterable<Student> getAllStudents() {
        // This returns a JSON or XML with the users
        return studentRepository.findAll();
    }

    // View – one student at a time based on id
    @GetMapping(path="/view/{id}")
    public @ResponseBody Student getStudent(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        return studentRepository.getStudentByStudentId(id);
    }
}