package com.example.javaspringbootproject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/program") // This means URL's start with /demo (after Application path)
public class ProgramsController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProgramsRepository programsRepository;

    @PostMapping(path="/add",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public @ResponseBody Programs addNewProgramsObject (@RequestBody Programs newProgram){
        return programsRepository.save(newProgram);
    }

    @GetMapping(path="/list")
    public @ResponseBody Iterable<Programs> getAllPrograms() {
        // This returns a JSON or XML with the users
        return programsRepository.findAll();
    }

    @GetMapping(path="/view/{id}")
    public @ResponseBody Programs getProgram(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        return programsRepository.getProgramsByPid(id);
    }

    @PutMapping(path="/modify",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Programs modifyProgram(@RequestBody Programs modifiedProgram){
        Programs program = programsRepository.getProgramsByPid(modifiedProgram.getPid());

        if (program == null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }

        program.setProgramName(modifiedProgram.getProgramName());
        program.setCampus(modifiedProgram.getCampus());

        return programsRepository.save(program);
    }

    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteProgram(@RequestParam Integer pid){
        Programs program = programsRepository.getProgramsByPid(pid);

        if (program == null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }

        programsRepository.delete(program);
        return "Program pid: " + pid + " was removed.";
    }
}
